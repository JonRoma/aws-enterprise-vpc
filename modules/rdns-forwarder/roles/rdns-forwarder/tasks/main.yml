# Copyright (c) 2017 Board of Trustees University of Illinois
---
# Use this task (VERY carefully!) to modify the ansible_pull settings of
# running instances previously deployed from this vX.Y release branch.  Note
# that this takes *two* full update cycles: one (using this playbook) to
# update the host_vars file and cron task for next time, and a second to
# actually run the new version of the playbook.
- name: override ansible_pull settings?
  set_fact:
    #ansible_pull_url: https://github.com/techservicesillinois/aws-enterprise-vpc.git
    #ansible_pull_checkout: vX.Y

- name: update ansible_pull settings saved in host vars
  lineinfile:
    dest: /etc/ansible/host_vars/localhost.yml
    regexp: "^{{ item }}: "
    line: "{{ item }}: {{ lookup('vars', item) }}"
  with_items:
    - ansible_pull_url
    - ansible_pull_checkout

- ec2_metadata_facts:

- name: install packages
  package: name={{ item }} state=present
  with_items:
    - bind
    - amazon-cloudwatch-agent

- name: configure amazon-cloudwatch-agent
  become: yes
  template:
    dest: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
    src: opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
    # check JSON syntax
    validate: python -m json.tool %s

- name: enable amazon-cloudwatch-agent
  service:
    name: amazon-cloudwatch-agent
    enabled: yes
    state: started

- name: generate rndc.key
  command: /usr/sbin/rndc-confgen -a -u named -r /dev/urandom
  args:
    creates: /etc/rndc.key

# update /var/named/zones.conf
- include: "zones.yml"
  tags:
    - zones

- name: named.conf
  template:
    dest: /etc/named.conf
    src: etc/named.conf.j2
    force: yes
    validate: /usr/sbin/named-checkconf %s
  notify: rndc reconfig

- name: named OPTIONS
  lineinfile:
    dest: /etc/sysconfig/named
    regexp: '^OPTIONS='
    line: 'OPTIONS="-4"'
  notify: restart named

- name: "start named at boot"
  service:
    name: named
    enabled: yes
  # trigger a reboot (rather than just applying state: started now) to make
  # sure everything works as intended
  notify: reboot

- name: update existing packages
  yum:
    name: '*'
    state: latest
  notify: reboot

- name: logrotate.d/ansible
  template:
    dest: /etc/logrotate.d/ansible
    src: etc/logrotate.d/ansible.j2
    force: yes

# update zone configuration (using current playbook) once per hour
- name: "cron task: update zone list"
  cron:
    name: update zone list
    # use an explicit login shell to avoid PATH surprises
    job: "bash -lc 'ansible-playbook {{ ansible_pull_directory }}/modules/rdns-forwarder/local.yml --tags=zones' > /dev/null"
    minute: "{{ zone_update.minute }}"

# perform a full ansible-pull update (including upstream playbook changes) once per month
- name: "cron task: ansible-pull"
  cron:
    name: ansible-pull
    # use an explicit login shell to avoid PATH surprises
    job: "bash -lc 'ansible-pull --url={{ ansible_pull_url }} --checkout={{ ansible_pull_checkout }} --directory={{ ansible_pull_directory }} modules/rdns-forwarder/local.yml' > /dev/null"
    day: "{{ full_update.day }}"
    hour: "{{ full_update.hour }}"
    minute: "{{ full_update.minute }}"
